<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>宏任务微任务</title>
  </head>
  <body>
    <div id="hz"></div>
    <script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>
    <script type="text/javascript">
      var dom = new Vue({
        el: "#hz",
        data: {
          message: "三千世界",
        },
        template: `
        <div>
          <p>{{message}}</p>
        </div>
        `,
        mounted() {
          /* 这个博客讲的宏任务微任务很赞 https://blog.csdn.net/YeChan414/article/details/123960680?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167505842116800222898646%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167505842116800222898646&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-123960680-null-null.142^v71^control_1,201^v4^add_ask&utm_term=%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF&spm=1018.2226.3001.4187 */
          //eg:1  这三种任务的执行顺序是：同步任务>微任务>宏任务
          /*  Promise的then等方法是微任务，而Promise中的代码是同步任务，并且，
             process的nextTick的执行顺序优先于Promise的then等方法，因为process.nextTick是直接告诉浏览器说要尽快执行，而不是放入队列 */
          /*  console.log("start");
          setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          new Promise(function (resolve, reject) {
            console.log("children4");
            setTimeout(() => {
              console.log("children5");
              resolve("children6");
            }, 0);
          }).then((res) => {
            console.log("children7");
            setTimeout(() => {
              console.log(res);
            });
          }, 0); */
          /* start  children4 */
          /* 
          第一步先执行同步： 输出 start children4 遇到两个宏任务 未遇到微任务
          宏任务中：
          1 setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          2. setTimeout(() => {
              console.log("children5");
              resolve("children6");
            }, 0);
          微任务： 无
          
          第二步执行宏任务： 输出 children2 执行该宏任务，遇到了该宏任务的微任务Promise.resolve().then(() => {
              console.log("children3");
            });，执行该微任务 输出children3
          此时宏任务还剩：
           setTimeout(() => {
              console.log("children5");
              resolve("children6");
            }, 0);
          此时微任务： 无
          第三步执行下一个宏任务：输出children5   resolve("children6");遇到微任务 将其抛到微任务队列
            执行该宏任务的微任务  输出 children7 遇到宏任务，将其抛到宏任务队列
          
            此时宏任务还剩：
            setTimeout(() => {
              console.log(res);
            });
          }, 0)
          第四步执行宏任务 输出children6

          */

          /* 
          事件循环执行顺序：先执行同步，后执行异步，异步中分为宏任务和微任务
          异步中先执行微任务，然后执行宏任务，宏任务执行完，查看该宏任务下是否有微任务，如果有执行该微任务，
          微任务执行完后执行下一个宏任务，如此循环
          */

          //eg:2
          /* console.log("start");
          setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          new Promise(function (resolve, reject) {
            console.log("children4");
            resolve("children6");
            setTimeout(() => {
              console.log("children5");
            }, 0);
          }).then((res) => {
            console.log("children7");
            setTimeout(() => {
              console.log(res);
            });
          }, 0); */
          /* 第一步先执行同步  输出 start children4
          执行完同步后：
          宏任务：
          1.setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          2.setTimeout(() => {
              console.log("children5");
            }, 0);
          微任务：
          .then((res) => {
            console.log("children7");
            setTimeout(() => {
              console.log(res);
            });
          }, 0);
          第二部执行微任务：  输出children7 
          执行完微任务后：
          剩下宏任务：
          1.setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          2.setTimeout(() => {
              console.log("children5");
            }, 0);
          3.setTimeout(() => {
              console.log(res);
            });
          剩下微任务：无
          第三步执行宏任务1： 输出children2  执行该宏任务的微任务 输出 children3
          此时剩下宏任务：
          1.setTimeout(() => {
              console.log("children5");
            }, 0);
          2.setTimeout(() => {
              console.log(res);
            });
          微任务：无
          第四步执行宏任务：输出children5 输出children6
          */
          // eg3;
          /* console.log("start");
          setTimeout(() => {
            console.log("children2");
            Promise.resolve().then(() => {
              console.log("children3");
            });
          }, 0);
          new Promise(function (resolve, reject) {
            console.log("children4");
            setTimeout(() => {
              console.log("children5");
            }, 0);
            resolve("children6");
          }).then((res) => {
            console.log("children7");
            setTimeout(() => {
              console.log(res);
            });
          }, 0); */
          /* start  children4 children7 children2 children3 children5 children6 */
          /* 说明是遇到宏任务就把他抛入到宏任务队列 */

          // eg4
          async function async1() {
            console.log("async1 start");
            await async2();
            console.log("async1 end");
          }
          async function async2() {
            console.log("async2");
          }
          console.log("script start");
          setTimeout(function () {
            console.log("setTimeout");
          }, 0);
          async1();
          new Promise(function (resolve) {
            console.log("promise1");
            resolve();
          }).then(function () {
            console.log("promise");
          });
          console.log("script end");
          /* script start  async1 start  async2  async1 end  promise1  script end  promise  setTimeout   */
          /* 正确答案：script start  async1 start  async2   promise1  script end async1 end  promise  setTimeout */
          /* await async2()   相当于new Promise(()=>{async2()})  而将await后面的代码全部放到.then中去，所以输出
          async2后把await async2() 后面的代码放到微任务中了 */
        },
      });
    </script>
  </body>
</html>
